schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Character {
  appearsIn: [TranslatedResourceOfEpisode!]!
  height: Float!
  id: Int!
  name: String!
}

interface Translation {
  label: String!
}

"A connection to a list of items."
type CharactersConnection {
  "A list of edges."
  edges: [CharactersEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type CharactersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

type CreateReviewPayload {
  episode: Episode!
  review: Review!
}

type Droid implements Character {
  appearsIn: [TranslatedResourceOfEpisode!]! @translateEpisode(resourceKeyPrefix: "Episodes", toCodeLabelItem: true)
  friends("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): FriendsConnection
  height: Float!
  id: Int!
  name: String!
  primaryFunction: String!
}

"A connection to a list of items."
type FriendsConnection {
  "A list of edges."
  edges: [FriendsEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type FriendsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

type Human implements Character {
  appearsIn: [TranslatedResourceOfEpisode!]! @translateEpisode(resourceKeyPrefix: "Episodes", toCodeLabelItem: true)
  friends("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int): FriendsConnection
  hairColor: TranslatedResourceOfHairColor @translateHairColor(resourceKeyPrefix: "HairColors", toCodeLabelItem: true)
  hairColor2: TranslatedResourceOfHairColor @translateHairColor(resourceKeyPrefix: "HairColors", toCodeLabelItem: true)
  height: Float! @deprecated(reason: "invocations of this field will be tracked!")
  homePlanet: String
  id: Int!
  maritalStatus: TranslatedResourceOfMaritalStatus! @translateMaritalStatus(resourceKeyPrefix: "MaritalStatus", toCodeLabelItem: true)
  name: String!
}

type Mutation {
  createReview(input: CreateReviewInput!): CreateReviewPayload! @tracked @tracked
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  character(ids: [Int!]!): [Character!]!
  characters("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ICharacterSortInput!] where: ICharacterFilterInput): CharactersConnection
  hero(episode: Episode!): Character!
  reviews("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String episode: Episode! "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ReviewSortInput!] where: ReviewFilterInput): ReviewsConnection
  search(text: String!): [SearchResult!]!
}

type Review {
  commentary: String!
  id: UUID!
  stars: Int!
}

"A connection to a list of items."
type ReviewsConnection {
  "A list of edges."
  edges: [ReviewsEdge!]
  "A flattened list of the nodes."
  nodes: [Review!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type ReviewsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Review!
}

type Starship {
  id: Int!
  length: Float!
  name: String!
}

type Subscription {
  onReview(episode: Episode!): Review!
}

type TranslatedResourceOfEpisode implements Translation {
  key: Episode!
  label: String!
}

type TranslatedResourceOfHairColor implements Translation {
  key: HairColor!
  label: String!
}

type TranslatedResourceOfMaritalStatus implements Translation {
  key: MaritalStatus!
  label: String!
}

union SearchResult = Human | Droid | Starship

input CreateReviewInput {
  commentary: String!
  episode: Episode!
  stars: Int!
}

input EpisodeOperationFilterInput {
  eq: Episode
  neq: Episode
  in: [Episode!]
  nin: [Episode!]
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ICharacterFilterInput {
  and: [ICharacterFilterInput!]
  or: [ICharacterFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  appearsIn: ListEpisodeOperationFilterInput
  height: FloatOperationFilterInput
}

input ICharacterSortInput {
  id: SortEnumType
  name: SortEnumType
  height: SortEnumType
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListEpisodeOperationFilterInput {
  all: EpisodeOperationFilterInput
  none: EpisodeOperationFilterInput
  some: EpisodeOperationFilterInput
  any: Boolean
}

input ReviewFilterInput {
  and: [ReviewFilterInput!]
  or: [ReviewFilterInput!]
  id: UuidOperationFilterInput
  stars: IntOperationFilterInput
  commentary: StringOperationFilterInput
}

input ReviewSortInput {
  id: SortEnumType
  stars: SortEnumType
  commentary: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum Episode {
  NEW_HOPE
  EMPIRE
  JEDI
}

enum HairColor {
  BLOND
  BROWN
  RED
  BLACK
}

enum MaritalStatus {
  SINGLE
  COMPLICATED
  WIDOW
  MARRIED
}

enum SortEnumType {
  ASC
  DESC
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

directive @tracked repeatable on FIELD_DEFINITION

directive @translate(resourceKeyPrefix: String! toCodeLabelItem: Boolean!) on FIELD_DEFINITION

directive @translateEpisode(resourceKeyPrefix: String! toCodeLabelItem: Boolean!) on FIELD_DEFINITION

directive @translateHairColor(resourceKeyPrefix: String! toCodeLabelItem: Boolean!) on FIELD_DEFINITION

directive @translateMaritalStatus(resourceKeyPrefix: String! toCodeLabelItem: Boolean!) on FIELD_DEFINITION

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
